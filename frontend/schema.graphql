# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type LoginData {
    accessToken: String
}

type Mutation {
    addFileMessage(chatId: MongoID!, file: Upload): String
    addMessage(chatId: MongoID!, message: String!): String
    login(password: String!, username: String!): LoginData
}

type Query {
    chat(_id: MongoID!): chat
    me: user
    project(_id: MongoID!): project
    projects(
        "Filter by fields"
        filter: FilterFindManyprojectInput,
        limit: Int = 1000,
        skip: Int,
        sort: SortFindManyprojectInput
    ): [project]
    user(_id: MongoID!): user
    users(
        "Filter by fields"
        filter: FilterFindManyuserInput,
        limit: Int = 1000,
        skip: Int,
        sort: SortFindManyuserInput
    ): [user]
}

type Subscription {
    messageAdded: MongoID
}

type chat {
    _id: MongoID!
    messages: [chatMessages]
}

type chatMessages {
    _id: MongoID
    createdAt: Date
    fileUrl: String
    message: String
    sender: user
    senderId: MongoID
    updatedAt: Date
}

type project {
    _id: MongoID!
    chatId: MongoID
    createdAt: Date
    name: String
    participantIds: [MongoID]
    participants(limit: Int = 1000, sort: SortFindByIdsuserInput): [user]
    steps: [projectSteps]
    updatedAt: Date
}

type projectSteps {
    _id: MongoID
    createdAt: Date
    dateEnd: Date
    dateStart: Date
    files: [projectStepsFiles]
    name: String
    stories: [projectStepsStories]
    updatedAt: Date
}

type projectStepsFiles {
    _id: MongoID
    createdAt: Date
    extension: String
    fileKey: String
    name: String
    size: Float
    updatedAt: Date
}

type projectStepsStories {
    _id: MongoID
    createdAt: Date
    estimate: Float
    name: String
    updatedAt: Date
}

type user {
    _id: MongoID!
    createdAt: Date
    fullname: String
    password: String
    type: Float
    updatedAt: Date
    username: String
}

enum SortFindByIdsuserInput {
    _ID_ASC
    _ID_DESC
}

enum SortFindManyprojectInput {
    _ID_ASC
    _ID_DESC
}

enum SortFindManyuserInput {
    _ID_ASC
    _ID_DESC
}

input FilterFindManyprojectInput {
    AND: [FilterFindManyprojectInput!]
    OR: [FilterFindManyprojectInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindManyprojectInput
    chatId: MongoID
    createdAt: Date
    name: String
    participantIds: [MongoID]
    steps: [projectStepsInput]
    updatedAt: Date
}

input FilterFindManyuserInput {
    AND: [FilterFindManyuserInput!]
    OR: [FilterFindManyuserInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindManyuserInput
    createdAt: Date
    fullname: String
    password: String
    type: Float
    updatedAt: Date
    username: String
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindManyprojectInput {
    _id: _idOperatorsFilterFindManyprojectInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindManyuserInput {
    _id: _idOperatorsFilterFindManyuserInput
}

input _idOperatorsFilterFindManyprojectInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterFindManyuserInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input projectStepsFilesInput {
    _id: MongoID
    createdAt: Date
    extension: String
    fileKey: String
    name: String
    size: Float
    updatedAt: Date
}

input projectStepsInput {
    _id: MongoID
    createdAt: Date
    dateEnd: Date
    dateStart: Date
    files: [projectStepsFilesInput]
    name: String
    stories: [projectStepsStoriesInput]
    updatedAt: Date
}

input projectStepsStoriesInput {
    _id: MongoID
    createdAt: Date
    estimate: Float
    name: String
    updatedAt: Date
}


"The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field."
scalar MongoID

scalar Date

"The `Upload` scalar type represents a file upload."
scalar Upload
